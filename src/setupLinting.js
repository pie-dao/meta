import fetch from 'node-fetch';

import { terminal } from 'terminal-kit';
import { validateIsString } from '@pie-dao/utils';

import run from './utils/run';

const repo = process.env.REPO;
const token = process.env.TOKEN;

validateIsString(repo, {
  message: 'Please set environment variable REPO. Ex: REPO="pie-dao/meta" yarn branchProtection"',
});

validateIsString(token, {
  message: 'Please set environment variable TOKEN. Ex: TOKEN="<token>" yarn branchProtection"',
});

const es6Linting = async () => {
  const branch = `feature/linting-es6-${Date.now()}`;

  const commands = [
    'mkdir -p tmp',
    'cd tmp',
    `git clone git@github.com:${repo} repo`,
    'cd repo',
    `git checkout -b ${branch}`,
    'yarn add -D eslint@6.8.0 eslint-config-airbnb-base@14.1.0 eslint-plugin-import@2.20.2',
    'rm -v .eslintrc .eslintrc.js',
    'cp -v ../../config/eslint/es6.eslint.js .eslintrc.js',
    'mkdir -p .github/workflows/',
    'cp -v ../../github/workflows/eslint.yml .github/workflows/',
    'sed -i "s/\\"scripts\\": {/\\"scripts\\": {\\n' +
    '    \\"lint\\": \\"npx eslint src\\/*.js src\\/**\\/*.js\\",\\n' +
    '    \\"prerelease\\": \\"yarn lint\\",\\n' +
    '    \\"release\\": \\"npm publish --access=public\\",' +
    '/" package.json',
    'git add .',
    'git commit -m "add linting configuration"',
    `git push -u origin ${branch}`,
    'cd ../',
    'rm -rf repo',
  ];

  await run(commands);

  return branch;
};

const reactLinting = async() => {
  const branch = `feature/linting-react-${Date.now()}`;

  const commands = [
    'mkdir -p tmp',
    'cd tmp',
    `git clone git@github.com:${repo} repo`,
    'cd repo',
    `git checkout -b ${branch}`,
    'yarn add -D eslint@6.8.0 eslint-config-airbnb@18.1.0 eslint-plugin-import@2.20.2',
    'yarn add -D eslint-plugin-jsx-a11y@6.2.3 eslint-plugin-react@7.19.0 ',
    'yarn add -D eslint-plugin-react-hooks@2.5.1',
    'rm -v .eslintrc .eslintrc.js',
    'cp -v ../../config/eslint/react.eslint.js .eslintrc.js',
    'sed -i "s/\\"scripts\\": {/\\"scripts\\": {\\n' +
    '    \\"lint\\": \\"npx eslint src\\/*.js src\\/**\\/*.js\\",\\n' +
    '    \\"prerelease\\": \\"yarn lint\\",\\n' +
    '    \\"release\\": \\"npm publish --access=public\\",\\n' +
    '/" package.json',
    'git add .',
    'git commit -m "add linting configuration"',
    `git push -u origin ${branch}`,
    'cd ../',
    'rm -rf repo',
  ];

  await run(commands);

  return branch;
};

const main = async () => {
  try {
    terminal.bold(`What type of project is ${repo}?`);

    const { selectedIndex, selectedText } = await new Promise((resolve) => {
      terminal.singleColumnMenu([
        'ES6 Library',
        'React Component',
      ], {}, (err, response) => {
        if (err) {
          console.log(err);
          process.exit(1);
        }

        resolve(response)
      });
    });

    let branch;

    if (selectedIndex === 0) {
      branch = await es6Linting();
    }

    if (selectedIndex === 1) {
      branch = await reactLinting();
    }

    console.log(branch);

    const url = `https://api.github.com/repos/${repo}/pulls`;
    const headers = { 'Authorization': `token ${token}` };
    const method = 'POST';
    const body = JSON.stringify({
      title: 'eslint setup',
      head: branch,
      base: 'development',
      body: `Creates ${selectedText.toLowerCase()} eslint setup. PR generated by pie-dao/meta repo.`,
    });

    const response = await fetch(url, { body, headers, method });
    console.log(url, await response.json());
  } catch (err) {
    console.log(err);
  }

  process.exit(0);
};

main();
